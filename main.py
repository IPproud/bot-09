import g4f
import logging
import json
import sqlite3
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = "8378492013:AAEO9nI6gHqC3JPSiY9NrJbf8qti_zdTWHM"

ADMIN_IDS = [7963125435]
BANNED_USERS = set()

class DatabaseManager:
    def __init__(self, db_name="svai_bot.db"):
        self.db_name = db_name
        self.init_database()

    def init_database(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                message_count INTEGER DEFAULT 0,
                last_activity TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                role TEXT,
                content TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                tokens_used INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS banned_users (
                user_id INTEGER PRIMARY KEY,
                reason TEXT,
                banned_by INTEGER,
                banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        ''')
        
        conn.commit()
        conn.close()

    def add_user(self, user_id, username, first_name, last_name):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, last_activity)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, datetime.now()))
        conn.commit()
        conn.close()

    def increment_message_count(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET message_count = message_count + 1, last_activity = ?
            WHERE user_id = ?
        ''', (datetime.now(), user_id))
        conn.commit()
        conn.close()

    def get_user_stats(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT message_count, created_at FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result

    def save_conversation(self, user_id, role, content, tokens=0):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO conversations (user_id, role, content, tokens_used)
            VALUES (?, ?, ?, ?)
        ''', (user_id, role, content, tokens))
        conn.commit()
        conn.close()

    def get_conversation_history(self, user_id, limit=10):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT role, content FROM conversations 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT ?
        ''', (user_id, limit))
        results = cursor.fetchall()
        conn.close()
        return results[::-1]

    def clear_conversation_history(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM conversations WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

    def ban_user(self, user_id, reason, banned_by, days=0):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        expires_at = None
        if days > 0:
            expires_at = datetime.now() + timedelta(days=days)
        
        cursor.execute('''
            INSERT OR REPLACE INTO banned_users (user_id, reason, banned_by, expires_at)
            VALUES (?, ?, ?, ?)
        ''', (user_id, reason, banned_by, expires_at))
        conn.commit()
        conn.close()
        BANNED_USERS.add(user_id)

    def unban_user(self, user_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM banned_users WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        BANNED_USERS.discard(user_id)

    def is_user_banned(self, user_id):
        if user_id in BANNED_USERS:
            return True
        
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT expires_at FROM banned_users 
            WHERE user_id = ? AND (expires_at IS NULL OR expires_at > ?)
        ''', (user_id, datetime.now()))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            BANNED_USERS.add(user_id)
            return True
        return False

    def get_all_users(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username, first_name, message_count FROM users ORDER BY message_count DESC')
        results = cursor.fetchall()
        conn.close()
        return results

    def get_banned_users(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT bu.user_id, u.username, bu.reason, bu.banned_by, bu.banned_at, bu.expires_at
            FROM banned_users bu
            LEFT JOIN users u ON bu.user_id = u.user_id
        ''')
        results = cursor.fetchall()
        conn.close()
        return results

class SVAIProvider:
    def __init__(self):
        self.providers = self._get_available_providers()
        self.current_provider_index = 0

    def _get_available_providers(self):
        available = []
        for attr_name in dir(g4f.Provider):
            if not attr_name.startswith('_'):
                provider = getattr(g4f.Provider, attr_name)
                if isinstance(provider, type):
                    available.append(provider)
        return available

    async def get_response(self, messages):
        for attempt in range(len(self.providers)):
            provider = self.providers[self.current_provider_index]
            try:
                logger.info(f"Trying provider: {provider.__name__}")
                
                response = await g4f.ChatCompletion.create_async(
                    model=g4f.models.gpt_4,
                    messages=messages,
                    provider=provider,
                    timeout=60
                )
                
                if response and len(response.strip()) > 5:
                    logger.info(f"Success with provider: {provider.__name__}")
                    return response.strip()
                    
            except Exception as e:
                logger.warning(f"Provider {provider.__name__} failed: {str(e)[:100]}")
            
            self.current_provider_index = (self.current_provider_index + 1) % len(self.providers)
            await asyncio.sleep(1)
        
        return "‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

class SVAIBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.provider = SVAIProvider()
        self.system_prompt = """–¢—ã svAI - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. –¢–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

üéØ –û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –°–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –≤ —Ä–µ—à–µ–Ω–∏—è—Ö –ø—Ä–æ–±–ª–µ–º
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
- –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üìù –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ß–µ—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
- –†–∞–∑–±–∏–≤–∞–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ —á–∞—Å—Ç–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–¥–µ–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã

–ü–æ–º–Ω–∏: —Ç–≤–æ—è —Ü–µ–ª—å - –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"""

    async def process_message(self, user_id, message):
        if self.db.is_user_banned(user_id):
            return "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –î–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

        conversation_history = self.db.get_conversation_history(user_id, limit=6)
        
        messages = [{"role": "system", "content": self.system_prompt}]
        
        for role, content in conversation_history:
            messages.append({"role": role, "content": content})
        
        messages.append({"role": "user", "content": message})

        response = await self.provider.get_response(messages)
        
        if not response.startswith("‚ùå"):
            self.db.save_conversation(user_id, "user", message)
            self.db.save_conversation(user_id, "assistant", response)
            self.db.increment_message_count(user_id)

        return response

bot = SVAIBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    bot.db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    welcome_text = """ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ svAI!*

*–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞  
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/svai - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

*–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:*
‚úÖ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
‚úÖ –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚úÖ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É! ‚ö°"""

    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    user_message = update.message.text

    if user_message.startswith('/'):
        return

    await update.message.chat.send_action(action="typing")
    
    response = await bot.process_message(user.id, user_message)
    await update.message.reply_text(response, parse_mode='Markdown')

async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    bot.db.clear_conversation_history(user.id)
    await update.message.reply_text("üóëÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!*", parse_mode='Markdown')

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    stats = bot.db.get_user_stats(user.id)
    
    if stats:
        message_count, created_at = stats
        stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

*–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {message_count}
*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {created_at.split()[0]}
*–°—Ç–∞—Ç—É—Å:* ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ"""
    else:
        stats_text = "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def svai_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = """‚ö° *svAI - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç*

*–í–ï–†–°–ò–Ø:* 2.0
*–ú–û–î–ï–õ–¨:* ????
*–ë–ê–ó–ê:* ??????

*–û–°–û–ë–ï–ù–ù–û–°–¢–ò:*
üîπ –ú—É–ª—å—Ç–∏-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
üîπ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
üîπ –°–∏—Å—Ç–µ–º–∞ –±–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üîπ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üîπ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

*–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö:* –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
*–°–¢–ê–¢–£–°:* ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"""

    await update.message.reply_text(info_text, parse_mode='Markdown')

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    users = bot.db.get_all_users()
    banned_users = bot.db.get_banned_users()
    
    stats_text = f"""üìà *–ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}
*–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:* {len(banned_users)}

*–¢–û–ü-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
"""
    
    for i, (user_id, username, first_name, count) in enumerate(users[:5], 1):
        name = first_name or username or f"ID{user_id}"
        stats_text += f"{i}. {name}: {count} —Å–æ–æ–±—â.\n"

    stats_text += f"\n*–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:* {sum(user[3] for user in users)}"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> <–ø—Ä–∏—á–∏–Ω–∞> [–¥–Ω–∏]")
        return

    try:
        target_user_id = int(context.args[0])
        reason = ' '.join(context.args[1:-1]) if len(context.args) > 2 else context.args[1]
        days = int(context.args[-1]) if context.args[-1].isdigit() else 0
        
        bot.db.ban_user(target_user_id, reason, user.id, days)
        
        duration = "–Ω–∞–≤—Å–µ–≥–¥–∞" if days == 0 else f"–Ω–∞ {days} –¥–Ω–µ–π"
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {duration}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ –¥–Ω–µ–π")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    try:
        target_user_id = int(context.args[0])
        bot.db.unban_user(target_user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def list_banned(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    banned_users = bot.db.get_banned_users()
    
    if not banned_users:
        await update.message.reply_text("üö´ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    banned_text = "üö´ *–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:*\n\n"
    
    for i, (user_id, username, reason, banned_by, banned_at, expires_at) in enumerate(banned_users, 1):
        name = username or f"ID{user_id}"
        duration = "–ù–∞–≤—Å–µ–≥–¥–∞" if not expires_at else f"–î–æ {expires_at.split()[0]}"
        banned_text += f"{i}. {name} (ID: {user_id})\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n{duration}\n\n"

    await update.message.reply_text(banned_text, parse_mode='Markdown')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling update: {context.error}", exc_info=context.error)

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_history))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("svai", svai_info))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("unban", unban_user))
    application.add_handler(CommandHandler("list_banned", list_banned))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_error_handler(error_handler)
    
    logger.info("ü§ñ svAI Bot Mega Edition started successfully!")
    logger.info("üìä Database: SQLite3")
    logger.info("‚ö° Providers: Multiple GPT-4")
    logger.info("üëë Admin system: Active")
    
    application.run_polling()

if __name__ == "__main__":
    main()